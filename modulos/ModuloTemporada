temporada se representa con estrT

donde estrT es: tupla<
	sistema : sistemaLaboral, 
	paritariasAbiertas: conj(pparitaria),
	acuerdosVigentes: vector(lista(pacuerdo)),
	#aperturas: vector(nat),
>

---

Rep


sistema 		sistema
	.
	.

sistema 		paritariasAbiertas
	1.cantidad de gremios >= #paritariasAbiertas				[se deduce de 15.]
	2.toda paritaria de paritariasAbiertas pertence a algun gremio del sistema

sistema 		acuerdosVigentes
	3.cantidad de gremios >= #acuerdos 							[se deduce de 15.]
	4.cantidad de grupos aliados = longitud(acuerdosVigentes)
	5.los acuerdos en alguna lista de acuerdosVigentes son de algun gremio del sistema
	6.para todo par de gremios donde ambos tienen acuerdos: ((son aliados) sii (estan en la misma lista de acuerdos))

sistema 		#aperturas
	7.cantidad de gremios == #aperturas
	.

paritariasAbiertas		paritariasAbiertas
	8.no hay paritarias de un mismo gremio
	.

paritariasAbiertas		acuerdosVigentes
	9.un mismo gremio no tiene una paritaria y un acuerdo a la vez
	.

paritariasAbiertas		#aperturas
	.
	.

acuerdosVigentes 		acuerdosVigentes
	10.no hay acuerdos de un mismo gremio
	11.cada lista de acuerdos está ordenada segun porcentaje
	12.todo acuerdo tiene un porcentaje que está entre el piso y el techo de su paritaria

acuerdosVigentes 		#aperturas
	13.para cada acuerdo, acuerdosPrevios = #aperturas del gremio
	.

#aperturas 			#aperturas
	.
	.

#aperturas acuerdosVigentes paritariasAbiertas
	14.(#aperturas = 0) sii (no tiene paritaria ni acuerdo)
	15.cantidad de paritariasAbiertas + cantidad de acuerdos + cantidad de gremios sin aperturas = cantidad de gremios total






















---

Iniciar: in sl: sistemaLaboral -> res: temporada
iIniciar: in sl: sistemaLaboral -> res: estrT
	
	res.sistema <- sl
	res.paritariasAbiertas <- Vacío()
	res.acuerdosVigentes <- Vacía()
	res.#aperturas <- Vacía()

	InicializarAcuerdosVigentes(res)
	InicializarAperturas(res)

---

AbrirParitaria: in/out tmp: temporada, in gr: gremio, in p: nat, in t: nat, in es: conj(empresa)
iAbrirParitaria: in/out tmp: estrT, in gr: gremio, in p: nat, in t: nat, in es: conj(empresa)

	if Obtener#Aperturas(tmp, &gr) > 0
		RemoverAcuerdo(tmp, &gr)

	Agregar(tmp.paritariasAbiertas, &NuevaParitaria(&gr, p, t))

---

CerrarAcuerdo: in/out tmp: temporada, in gr: gremio , in pcj: nat 
iCerrarAcuerdo: in/out tmp: estrT, in gr: gremio , in pcj: nat

	RemoverParitaria(tmp, &gr)
	
	itLista(pacuerdo) itAcuerdos <- CrearIt(ObtenerAcuerdosDeAliados(tmp, &gr))

	while HaySiguiente(itAcuerdos) && ObtenerPorcentaje(*Siguiente(itAcuerdos)) < pcj

		Agregar(tmp.paritariasAbiertas, ObtenerParitaria(*Siguiente(itAcuerdos)))

		EliminarSiguiente(itAcuerdos)

	AgregarComoSiguiente(itAcuerdos, &NuevoAcuerdo(pa, pcj))

---

Reabrir: in/out tmp: temporada, in gr: gremio
iReabrir: in/out tmp: estrT,  in gr: gremio

	pparitaria pa <- RemoverAcuerdo(tmp, &gr)

	Agregar(tmp.paritariasAbiertas, pa)

---

Gremios: in/out tmp: temporada -> res: conj(gremio)
iGremios: in/out tmp: estrT -> res: conj(gremio)

	res <- Vacío()

	itConj(pgremio) itGremios <- ObtenerGremios(tmp.sistema)

	while HaySiguiente(itGremios)
		Agregar(res, *Siguiente(itGremios))
		Avanzar(itGremios)

---

EnParitarias: in/out tmp: temporada, in gr: gremio -> res: bool
iEnParitarias: in/out tmp: estrT, in gr: gremio -> res: bool

	itConj(pparitaria) itParitarias <- CrearIt(tmp.paritariasAbiertas)

	while HaySiguiente(itParitarias) && ObtenerGremio(*Siguiente(itParitarias)) != &gr
		Avanzar(itParitarias)

	res <- HaySiguiente(itParitarias)

---

GremiosNegociando: in/out tmp: temporada -> res: conj(gremio)
iGremiosNegociando: in/out tmp: estrT -> res: conj(gremio)

	res <- Vacío()

	itConj(pparitaria) itParitarias <- CrearIt(tmp.paritariasAbiertas)

	while HaySiguiente(itParitarias)
		Agregar(res, *ObtenerGremio(*Siguiente(itParitarias)))
		Avanzar(itParitarias)

---

EmpresasNegociando: in/out tmp: temporada -> res: conj(empresa)
iEmpresasNegociando: in/out tmp: estrT -> res: conj(empresa)

	res <- Vacío()

	itConj(pparitaria) itParitarias <- CrearIt(tmp.paritariasAbiertas)

	while HaySiguiente(itParitarias)
		conj(empresa) empresasParitaria <- ObtenerEmpresas(*ObtenerGremio(*Siguiente(itParitarias)))
		res <- Union(res, empresasParitaria)
		Avanzar(itParitarias)

---

TrabajadoresNegociando: in/out tmp: temporada -> res: nat
iTrabajadoresNegociando: in/out tmp: estrT -> res: nat

	res <- 0

	itConj(pparitaria) itParitarias <- CrearIt(tmp.paritariasAbiertas)

	while HaySiguiente(itParitarias)
		nat #afiliadosParitaria <- Obtener#Afiliados(*ObtenerGremio(*Siguiente(itParitarias)))
		res <- res + #afiliadosParitaria
		Avanzar(itParitarias)

---

GremioConflictivo: in/out tmp: temporada -> res: gremio
iGremioConflictivo: in/out tmp: estrT -> res: gremio

	itConj(pgremio) itGremios <- Gremios(tmp)

	pgremio gremioConflictivo <- Siguiente(itGremios)
	nat maxAperturas <- Obtener#DeAperturas(tmp, gremioConflictivo)
	Avanzar(itGremios)

	while HaySiguiente(itGremios)

		nat #aperturas <- Obtener#DeAperturas(tmp, Siguiente(itGremios))

		if #aperturas > maxAperturas

			maxAperturas <- #aperturas
			gremioConflictivo <- Siguiente(itGremios)

		Avanzar(itGremios)

	res <- *gremioConflictivo

---

/*
* inicializo vector de acuerdos vigentes con una lista vacía para cada
* grupo de aliados
*/

iInicializarAcuerdosVigentes: in tmp: estrT

	nat indice <- 0

	while indice < Obtener#GruposDeAliados(tmp.sistema)

		tmp.acuerdosVigentes[indice] <- Vacía()

		indice <- indice + 1

---

/*
* inicializo vector contando cantidad de aperturas para cada gremio
*/

iInicializarAperturas: in tmp: estrT

	nat indice <- 0

	while indice < Cardinal(Gremios(tmp))

		tmp.#aperturas[indice] <- 0

		indice <- indice + 1

---

iRemoverParitaria: in tmp: , in gr: pgremio -> res: pparitaria

	itConj(pparitaria) itParitarias <- CrearIt(tmp.paritariasAbiertas)

	while ObtenerGremio(*Siguiente(itParitarias)) != gr
		Avanzar(itParitarias)

	res <- Siguiente(itParitarias)

	EliminarSiguiente(itParitarias)

---

iRemoverAcuerdo: in/out tmp: estrT, in gr: pgremio -> res: pparitaria
	
	itLista(pacuerdo) itAcuerdos <- CrearIt(ObtenerAcuerdosDeAliados(tmp, gr))

	while ObtenerGremio(*Siguiente(itAcuerdos)) != gr
		Avanzar(itAcuerdos)  

	res <- ObtenerParitaria(*Siguiente(itAcuerdos))

	EliminarSiguiente(itAcuerdos)

---

iObtenerAcuerdosDeAliados: in tmp:estrT, in gr: pgremio -> res: lista(pacuerdo)

	idGrupoDeAliados idGrupo <- ObtenerIdGrupoAliados(tmp.sistema, gr)

	res <- tmp.acuerdosVigentes[idGrupo]

---

iObtener#DeAperturas: in tmp: , gr: pgremio -> res: nat

	idGremio id <- ObtenerId(*gr)

	res <- tmp.#aperturas[id]