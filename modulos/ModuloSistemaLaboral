sistemaLaboral se representa con estrS

donde estrS es tupla<
	gremios: conj(pgremio)
	grupoAliadosGremio : diccTrie(idGrupoAliados)
	proximoIdGrupoAliados: nat
>

----

AgregarGremio:	in/out sl: sistemaLaboral, in gr: pgremio
iAgregarGremio:	in/out sl: estrS, in gr: pgremio
	
	Agregar(sl.gremios, gr)
	Definir(sl.grupoAliadosGremio, DameNombre(*gr), sl.proximoIdGrupoAliados)
	sl.proximoIdGrupoAliados <- sl.proximoIdGrupoAliados + 1

----

AliarGremios: in/out sl: sistemaLaboral, in gr1: pgremio, in gr2: pgremio
iAliarGremios: in/out sl: estrS, in gr1: pgremio, in gr2: pgremio

	idGrupoAliados idGrupoG1 <- DameIdGrupoAliados(sl, gr1)
	idGrupoAliados idGrupoG2 <- DameIdGrupoAliados(sl, gr2)

	itConj(pgremio) itGremios <- sl.gremios

	while HaySiguiente(itGremios)

		if DameIdGrupoAliados(sl, Siguente(itGremios)) = idGrupoG1
			DefinirIdGrupoAliados(sl, Siguente(itGremios), idGrupoG2)

		Avanzar(itGrupo)

---

DameIdGrupoAliados: in sl: sistemaLaboral, gr: pgremio -> res: idGrupoAliados
iDameIdGrupoAliados: in sl: estrS, gr: pgremio -> res: idGrupoAliados

	res <- Obtener(sl.grupoAliadosGremio, DameId(*gr))

---

DameGremios: in sl: sistemaLaboral -> res: conj(pgremio)
iDameGremios: in sl: estrS -> res: conj(pgremio)

	res <- sl.gremios

---

iDefinirIdGrupoAliados: in sl: estrS, in gr: pgremio, in id: idGrupoAliados

	Definir(sl.grupoAliadosGremio, DameId(*gr), id)